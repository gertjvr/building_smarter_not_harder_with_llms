/**
 * Setup script for RevealJS Multiplex
 * This script creates the necessary configuration for the multiplex plugin
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration for the multiplex server
const config = {
  // Socket.io server configuration
  server: {
    url: 'http://localhost:1948', // Default socket.io server URL
    id: generateId(), // Generate a unique ID for this presentation
    secret: generateSecret() // Generate a secret for the master presentation
  }
};

// Generate a random ID for the presentation
function generateId() {
  return Math.random().toString(36).substring(2, 15);
}

// Generate a random secret for the master presentation
function generateSecret() {
  return Math.random().toString(36).substring(2, 15);
}

// Create a multiplex-config.js file with the configuration
const configContent = `
// This file is auto-generated by setup-multiplex.js
// Do not edit manually

export const multiplexConfig = {
  server: '${config.server.url}',
  id: '${config.server.id}',
  secret: '${config.server.secret}'
};
`;

// Write the configuration file
fs.writeFileSync(
  path.join(__dirname, 'assets', 'js', 'multiplex-config.js'),
  configContent
);

// Create a .env file with the configuration for Docker
const envContent = `
# This file is auto-generated by setup-multiplex.js
# Do not edit manually

MULTIPLEX_SERVER_URL=${config.server.url}
MULTIPLEX_ID=${config.server.id}
MULTIPLEX_SECRET=${config.server.secret}
`;

fs.writeFileSync(
  path.join(__dirname, '.env'),
  envContent
);

console.log('Multiplex configuration created successfully!');
console.log('Server URL:', config.server.url);
console.log('Presentation ID:', config.server.id);
console.log('Master Secret:', config.server.secret);
console.log('\nTo start the master presentation:');
console.log('  pnpm dev:master');
console.log('\nTo start a client presentation:');
console.log('  pnpm dev:client');
console.log('\nTo start the socket.io server with Docker:');
console.log('  docker-compose up -d');
